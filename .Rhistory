x <- galton $ parent - mean( galton $ parent)
freqData <- as.data.frame( table( x, y))
names( freqData) <- c(" child", "parent", "freq")
freqData $ child <- as.numeric( as.character( freqData $ child))
freqData $ parent <- as.numeric( as.character( freqData $ parent))
g <- ggplot( filter( freqData, freq > 0), aes( x = parent, y = child))
g <- g + scale_size( range = c( 2, 20), guide = "none" )
g <- g + geom_point( colour =" grey50", aes( size = freq + 20, show_guide = FALSE))
g <- g + geom_point( aes( colour = freq, size = freq))
g <- g + scale_colour_gradient( low = "lightblue", high =" white")
g <- g + geom_abline( intercept = 0, slope = beta, size =3)
mse <- mean( (y - beta * x) ^ 2 )
g <- g + ggtitle( paste(" beta = ", beta, "mse = ", round( mse, 3)))
g
}
myPlot <- function( beta){
g <- ggplot( filter( freqData, freq > 0), aes( x = parent, y = child))
g <- g + scale_size( range = c( 2, 20), guide = "none" )
g <- g + geom_point( colour =" grey50", aes( size = freq + 20, show_guide = FALSE))
g <- g + geom_point( aes( colour = freq, size = freq))
g <- g + scale_colour_gradient( low = "lightblue", high =" white")
g <- g + geom_abline( intercept = 0, slope = beta, size =3)
mse <- mean( (y - beta * x) ^ 2 )
g <- g + ggtitle( paste(" beta = ", beta, "mse = ", round( mse, 3)))
g
}
manipulate( myPlot( beta), beta = slider( 0.6, 1.2, step = 0.02))
y <- galton$child - mean( galton$child)
x <- galton$parent - mean( galton$parent)
freqData <- as.data.frame( table( x, y))
names( freqData) <- c(" child", "parent", "freq")
freqData$child <- as.numeric( as.character( freqData$child))
freqData$parent <- as.numeric( as.character( freqData$parent))
manipulate( myPlot( beta), beta = slider( 0.6, 1.2, step = 0.02))
y <- galton$child - mean( galton$child)
x <- galton$parent - mean( galton$parent)
freqData <- as.data.frame( table( x, y))
names( freqData) <- c(" child", "parent", "freq")
freqData$child <- as.numeric( as.character( freqData$child))
freqData$parent <- as.numeric( as.character( freqData$parent))
myPlot <- function( beta){
g <- ggplot( filter( freqData, freq > 0), aes( x = parent, y = child))
g <- g + scale_size( range = c( 2, 20), guide = "none" )
g <- g + geom_point( colour =" grey50", aes( size = freq + 20, show_guide = FALSE))
g <- g + geom_point( aes( colour = freq, size = freq))
g <- g + scale_colour_gradient( low = "lightblue", high =" white")
g <- g + geom_abline( intercept = 0, slope = beta, size =3)
mse <- mean( (y - beta * x) ^ 2 )
g <- g + ggtitle( paste(" beta = ", beta, "mse = ", round( mse, 3)))
g
}
manipulate( myPlot( beta), beta = slider( 0.6, 1.2, step = 0.02))
library(UsingR)
data(galton)
library(dplyr); library(ggplot2)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
lm(y~x)
beta1
beta0
coef(lm(y~x))
?rbind
rbind
rbind(c(beta0, beta1), lm(y~x))
rbind(c(beta0, beta1), coef(lm(y~x)))
lm(y~x)
lm(x~y)
y
y-mean(y)
yc = y-mean(y)
xc = x-mean(x)
coef(lm(y~x))
a <- rmorm(100)
a <- rnorm(100)
b <- rnorm(100)
am <- a - mean(a)
ab <- b - mean(b)
mean(ab)
mean(a)
b <- rnorm(100) *100
a <- rnorm(100) *100
am <- a - mean(a)
bm <- b - mean(b)
mean(am)
mean(a)
a
am
b
ba
bm
mean(bm)
mean(b)
b
mean(a)
odr <- order(x)
odr
?oder
?order
x <- rmorm(100)
x <- rnorm(100)
x
odr <- order(x)
odr
x[odr[100]]
library(swirl)
install_from_swirl("Regression Models")
data("father.son")
str(father.son)
summary (father.son)
plot(father.son)
lm(father.son$fheight ~ father.son$sheight)
ggplot(father.son)
ggplot(father.son, aes(x=father.son$fheight, y=father.son$sheight))
g <- ggplot( long, aes( x = value, fill = variable))
g <- g + geom_histogram( colour = "black", binwidth = 1)
g <- g + facet_grid(. ~ variable)
g
g <- ggplot(father.son, aes(x=father.son$fheight, y=father.son$sheight))
g <- g+ geom_point(colour="gray50")
g
g
g <- g + geom_smooth( method = "lm", colour = "black")
g
lm(father.son$sheight ~ father.son$fheight)
cov(father.son$fheight, father.son$sheight) *  sd(father.son$sheight) / sd(father.son$fheight)
cov(father.son$fheight, father.son$sheight) *  sd(father.son$sheight) / sd(father.son$fheight)
corr(father.son$fheight, father.son$sheight)
cor(father.son$fheight, father.son$sheight)
cor(father.son$sheight, father.son$fheight)
cor(father.son$fheight, father.son$sheight) *  sd(father.son$sheight) / sd(father.son$fheight)
cor(father.son$sheight, father.son$fheight) *  sd(father.son$sheight) / sd(father.son$fheight)
b1 <- cor(father.son$sheight, father.son$fheight) *  sd(father.son$sheight) / sd(father.son$fheight)
b0 <- mean(father.son$sheight) - b1*mean(father.son$fheight)
bo
b0
b1
mfather <- father.son$fheight - mean(father.son$fheight)
mson <- father.son$sheight - mean(father.son$sheight)
lm(mson ~ mfather)
g <- ggplot(father.son, aes(x=mfather, y=m.son))
g <- g+ geom_point(colour="gray50")
g <- g + geom_smooth( method = "lm", colour = "black")
g
g <- ggplot(father.son, aes(x=mfather, y=mson))
g <- g+ geom_point(colour="gray50")
g <- g + geom_smooth( method = "lm", colour = "black")
g
fit - lm(mson ~ mfather)
fit <- lm(mson ~ mfather)
fit
summary(fit)
fit <- lm(mson ~ mfather -1)
fit
summary(fit)
b1 <- cor(mson,mfather) * sd(mfather) / sd(mson)
bi
b1
b1 <- cor(mson,mfather) * sd(mson) / sd(mfather)
b1
b1 <- cor(mson,mfather)
b1
sd(mson)
sd(mchild)
sd(mfather)
mean(sfather)
mean(mfather)
mean(mson)
sum(mson * mfather)
sum(mson * mfather) / (mson ^2)
sum(mson * mfather) / sum((mson ^2))
normfather <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
normson <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
cor(normson, normfather)
lm(normson ~ normfather)
lm(normson ~ normfather -1)
lm(formula = father.son$sheight ~ father.son$fheight)
33.8866 + .5151 * 63
33.8866 + .5141 * 63
fit <- lm(formula = father.son$sheight ~ father.son$fheight)
predict(fit, newdata = data.frame(fheight = 63))
fit <- lm(formula = father.son$sheight ~ father.son$fheight)
summary(fit)
predict(fit, newdata = data.frame(fheight = 63))
coef(fit)
predict(fit, newdata = data.frame(fheight = 63))
fit
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2,1,3,1)
sum(w * x)/sum(w)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.4       2)y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49,       0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.4       2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x
y
sum(mean(y) * mean(x)) / sum(y^2)
sum(mean(y) * mean(x)) / sum(x^2)
sum(mean(y)) * sum(mean(x)) / sum(x^2)
sum(mean(y)) * sum(mean(x)) / sum(y^2)
?i
?I
lm(I(y - mean(y)) -I(x - mean(x)) - 1)
lm(I(y - mean(y)) ~ I(x - mean(x)) - 1)
mx <- x - mean(x)
mean(mx)
my <- y - mean(y)
cor(x,y) * (sd(my) / sd(mx))
cor(x,y) * (sd(mx) / sd(my))
sum(my * mx) / sum(mx ^ 2)
lm(y ~x)
lm (my ~ mx -1)
mean(y)
mean(x)
-.586 / .573
swirl()
n = 100
x = rnorm(n)
x2 = rnorm(n)
x3=rnorm(n)
plot (x3)
plot (x2)
plot (x)
y <- 1 + x + x2 + x3 + rnorm(n, sd=.1)
ey <- resid(lm(y ~ x2 + x3))
ex <- resid(lm(x ~ x2 + x3))
coef(lm(ey * ex))
coef(lm(ey ~ex))
coef(lm(ey ~ex -1))
coef(y ~ x + x2 X3)
coef(lm(y ~ x + x2 X3))
coef(lm(y ~ x + x2 + x3))
sum(ey * ex) / sum (ex^2)
x = rnorm(n)
x2 = rnorm(n)
x3 = rnorm(n)
sum(ey * ex) / sum (ex^2)
y = 1 + x + x2 + x3 + rnorm(n, sd=.1)
sum(ey * ex) / sum (ex^2)
ey <- resid(lm(y ~ x2 + x3))
ex <- resid(lm(x ~ x2 + x3))
sum(ey * ex) / sum (ex^2)
coef(lm(y ~ x + x2 + x3))
coef(lm(ey ~ex -1))
coef(lm(ey ~ex ))
require(datasets)
data("swiss")
install.packages("GGally")
require(GGally)
g = ggpairs(swiss)
g
g = ggpairs(swiss, lower= list(coninous = "smooth"), params = c(method = "loess"))
g = ggpairs(swiss, lower= list(continuous = "smooth"), params = c(method = "loess"))
g = ggpairs(swiss, lower= list(continuous = "smooth"), params = c(method = "loess"))
?ggpairs
g = ggpairs(swiss, lower= list(continuous = "smooth"), wrap_fn_with_param_arg( params = c(method = "loess"))
)
g = ggpairs(swiss, lower= list(continuous = "smooth"), wrap_fn_with_param_arg("loess"))
g = ggpairs(swiss, lower= list(continuous = "smooth"), wrap_fn_with_param_arg("loess"))
?loess
g = ggpairs(swiss, lower= list(continuous = "smooth"), wrap_fn_with_param_arg(c (method = "loess")))
g = ggpairs(swiss)
?swiss
n <- 100
x2 <- 1 : n
x2
x1 <- .01 * x2 + runif(n, .1, .1)
x1
plot(x1)
plot(x2)
plot(x1)
x1 <- .01 * x2 + runif(n, -.1, .1)
plot(x1)
y = -x1 + x2 + rnorm(n, sd = .01)
plot (y)
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
day <- data.frame(y=y, x1 =x1, x2=x2, ey = resid(lm(y ~x2)), ex = resid(lm(x1~x2)))
dat <- data.frame(y=y, x1 =x1, x2=x2, ey = resid(lm(y ~x2)), ex = resid(lm(x1~x2)))
str(dat)
resid(lm(y~x1))$coef
resid(lm(y~x1))
a <- resid(lm(y~x1))
b <- resid(lm(x1 ~ x2))
head (a)
head(b)
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
library(ggplot2)
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="black") + geom_point(size=4)
g
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="black") + geom_point(size=45)
g
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="black") + geom_point(size=4)
g
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="black") + geom_point(size=4)
g
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="red") + geom_point(size=4)
g
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g = g + geom_point(colour="grey50", size=5)
g
g = g + geom_point + geom_point(size=4)
g = g +  geom_point(size=4)
g
g = ggplot(dat, aes(y=y, x = x1, colour= x2))
g
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="green") + geom_point(size=4)
g
g = ggplot(dat, aes(y=ey, x = ex, colour= x2))
g = g + geom_point(colour="grey50", size=5) + geom_smooth(method=lm, se=FALSE, colour="green") + geom_point(size=4)
g
head(swiss)
bin <- swiss$Catholic>50 *1
bin
bin <- I(1 * (swiss$Catholic>50 ))
bin
plot(bin)
swiss$CathBin <- bin
head(swiss)
g = ggplot(swiss, aes(x=swiss$Agriculture))
str(swiss)
class(swiss)
g = ggplot(swiss, aes(x=rownames(swiss)))
g
g = ggplot(swiss, aes(x = swiss$Agriculture, y= swiss$Fertility, fill = swiss$CathBin))
g = g + geom_point(data=swiss$CathBin)
g = ggplot(swiss, aes(x = swiss$Agriculture, y= swiss$Fertility, colour = swiss$CathBin))
g
g = g + geom_path(size = 6, colour="black")
g
g = ggplot(swiss, aes(x = swiss$Agriculture, y= swiss$Fertility, colour = swiss$CathBin))
g = g + geom_point(size = 6, colour="black")
g
g = g + geom_point(size = 4)
g
fit <- lm(Fertility ~., data=swiss)
par(mfrow = c(2,2))
plot(fit)
str(mtcars)
fit1 <- lm(mpg ~ cyl + wt, data = mtcars)
fit2 <- lm(mpg ~ cyl * wt, data = mtcars)
fit1
summary(fit1)
fit1 <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit1)
fit2 <- lm(mpg ~ factor(cyl) * wt, data = mtcars)
summary(fit2)
lrtest(fit1, fit2)
libraary(lmtest)
library(lmtest)
lrtest(fit1, fit2)
(I (mtcars$wt))
(I (mtcars$wt *0.5))
(mtcars$wt *0.5)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary (lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars))
pairs(mtcars)
summary(lm(mpg ~., data=mtcars))
?mtcars
summary(lm(mpg ~ factor(am), data=mtcars))
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
dim(training3)
library(caret)
setwd("~/Dropbox/scans/datascience/John Hopkins/Machine Learning")
training <- read.csv("pml-training.csv", stringsAsFactors = FALSE)
testing <- read.csv("pml-testing.csv", stringsAsFactors = FALSE)
training2 <- training
for(x in ncol(training2):1) {
if(anyNA(training2[,x]))
training2[,x] <- NULL
}
training2ColNames <- colnames(training2)
for(x in ncol(training2):1) {
print(x)
strTest <- substr(training2ColNames[x], 1,4)
if(strTest == "kurt" | strTest == "skew" | strTest == "min_" | strTest == "max_" | strTest == "ampl")
training2[,x] <- NULL
}
training2$X<-NULL
training2$user_name<-NULL
training2$cvtd_timestamp<-NULL
training2$new_window<-NULL
pproc <- preProcess(training2[,-56], method=c("center", "scale"))
training3 <- predict(pproc, training2)
modFit <- train(classe~., method="rf", data=training3)
summary(modFit)
modFit$finalModel
modFit <- train(classe~., method="rf", data=training2)
xrefTrain <- sample(1:nrow(training2), training2/10)
xrefTrain <- sample(1:nrow(training2), nor(training2)/10)
xrefTrain <- sample(1:nrow(training2), nrow(training2)/10)
head xrefTrain
head (xrefTrain)
xrefTrainIndex = xrefTrain
predict5 <- predict(modFit, testing2)
predict5 <- predict(modFit, testing)
predict5
summary(training2)
?trainControl
set.seed(123)
seeds <- vector(mode = "list", length = 51)
for(i in 1:50) seeds[[i]] <- sample.int(1000, 22)
seeds[[51]] <- sample.int(1000, 1)
ctrl <- trainControl(method = "repeatedcv",
repeats = 5,
seeds = seeds)
set.seed(1)
mod <- train(Species ~ ., data = iris,
method = "knn",
tuneLength = 12,
trControl = ctrl)
mod
predTest
modFit
modFit$finalModel
modFit2 <- train(classe~., method="lm", data=training3)
modFit2 <- train(classe~., method="glm", data=training3)
summary (training)
head(summary(training))
str(training)
prcomp(training2)
training2 <- training
for(x in ncol(training2):1) {
if(anyNA(training2[,x]))
training2[,x] <- NULL
}
training2ColNames <- colnames(training2)
for(x in ncol(training2):1) {
print(x)
strTest <- substr(training2ColNames[x], 1,4)
if(strTest == "kurt" | strTest == "skew" | strTest == "min_" | strTest == "max_" | strTest == "ampl")
training2[,x] <- NULL
}
training2$X<-NULL
training2$user_name<-NULL
training2$cvtd_timestamp<-NULL
training2$new_window<-NULL
pproc <- preProcess(training2[,-56], method=c("center", "scale"))
training3 <- predict(pproc, training2)
prcomp(training2)
str(training2)
str(training2[,-56])
prcomp(training2[,-56])
PCA <- prcomp(training2[,-56])
PCA
PCA$rotation
summary(PCA)
typeColor <- ((training2$classe =="A") *1 +1)
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
ggplot(POC, aes(x[,1], x[,2]))
ggplot(PCA, aes(x[,1], x[,2]))
smoothplot(PCA$x[,1], PCA$x[,2], col=typeColor)
smoothScattert(PCA$x[,1], PCA$x[,2], col=typeColor)
smoothScatter(PCA$x[,1], PCA$x[,2], col=typeColor)
scatterplot(PCA$x[,1], PCA$x[,2], col=typeColor)
scatter(PCA$x[,1], PCA$x[,2], col=typeColor)
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
library(hexbin)
install.packages("hexbin")
library(hexbin)
bin <- hexbin(PCA$x[,1], PCA$x[,2])
plot(bin, col=typeColor)
plot(bin)
ggplot(PCA$x, aes(x=PCA$x[,1], y=PCA$x[,2], shape=typeColor) + geom_point()
ggplot(PCA$x, aes(x=PCA$x[,1], y=PCA$x[,2], shape=typeColor)) + geom_point()
z <- data.frame(PCA$x[,1], PCA$x[,2])
str(z)
z <- data.frame(x=PCA$x[,1], y=PCA$x[,2])
z
str(z)
ggplot(z, aes(x=z$x, y=z$y, shape=typeColor)) + geom_point()
z
scatterPlot(z, aes(x=z$x, y=z$y, shape=typeColor)) + geom_point()
scatter(z, aes(x=z$x, y=z$y, shape=typeColor)) + geom_point()
plot(bin)
ggplot(PCA$x, aes(x=PCA$x[,1], y=PCA$x[,2], shape=typeColor)) + geom_point()
ggplot(PCA$x, aes(x=PCA$x[,1], y=PCA$x[,2], shape=typeColor)) + geom_point()
plot(bin, col=typeColor)
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
typeColor <- ifelse(training$classe == "A",1, ifelse(training$classe == "B", 2, 3)
)
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
typeColor <- ifelse(training$classe == "A",1, ifelse(training$classe == "B", 2, 3))
typeColor <- ifelse(training$classe == "A",1, ifelse(training$classe == "B", 2, ifelse(training$classe == "C", 3,4)))
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
typeColor <- ifelse(training$classe == "A",1, ifelse(training$classe == "B", 2, ifelse(training$classe == "C", 3,ifelse(training$classe == "D",4,5)))
)
plot(PCA$x[,1], PCA$x[,2], col=typeColor)
summary(PCA)
PCA
summary(PCA)
PCA
summary(PCA)
